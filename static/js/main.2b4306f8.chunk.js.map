{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","themeStylingNums","navbarStyling","navbarStyleNum","href","document","querySelectorAll","Array","from","forEach","element","num","classList","contains","remove","add","faBars","getElementsByClassName","navbarToggler","mode","className","title","type","id","onClick","toggleMode","Textform","useState","text","setText","textFormPageStyling","themeStyleNumber","textArea","btn","previewText","heading","rows","value","onChange","event","target","placeholder","newText","toUpperCase","toLowerCase","replace","w","c","trim","getElementById","select","setSelectionRange","navigator","clipboard","writeText","length","split","defaultProps","about","App","setMode","modeName","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iOAIe,SAASA,EAAOC,GAE3B,IAAIC,EAAmB,CAAC,MAAO,MAAO,QAAS,QAE/C,SAASC,EAAcC,GAGnB,IAAIC,EAAOC,SAASC,iBAAiB,KAErCC,MAAMC,KAAKJ,GAAMK,SAAQ,SAAAC,GAAY,IAAD,gBACdT,GADc,IAChC,2BAAoC,CAAC,IAA1BU,EAAyB,QAC5BD,EAAQE,UAAUC,SAAS,WAAWF,KACtCD,EAAQE,UAAUE,OAAO,WAAWH,GACpCD,EAAQE,UAAUE,OAAO,cAJD,8BAOhCJ,EAAQE,UAAUG,IAAI,WAAWZ,MAOrC,IAAIa,EAASX,SAASY,uBAAuB,WAE7CV,MAAMC,KAAKQ,GAAQP,SAAQ,SAAAC,GAAY,IAAD,gBAChBT,GADgB,IAClC,2BAAoC,CAAC,IAA1BU,EAAyB,QAC5BD,EAAQE,UAAUC,SAAS,WAAWF,KACtCD,EAAQE,UAAUE,OAAO,WAAWH,GACpCD,EAAQE,UAAUE,OAAO,qBAJC,8BAOlCJ,EAAQE,UAAUG,IAAI,WAAWZ,MAIrC,IAAIe,EAAgBb,SAASY,uBAAuB,kBAEpDV,MAAMC,KAAKU,GAAeT,SAAQ,SAAAC,GAAY,IAAD,gBACvBT,GADuB,IACzC,2BAAoC,CAAC,IAA1BU,EAAyB,QAC5BD,EAAQE,UAAUC,SAAS,kBAAkBF,KAC7CD,EAAQE,UAAUE,OAAO,kBAAkBH,GAC3CD,EAAQE,UAAUE,OAAO,4BAJQ,8BAOzCJ,EAAQE,UAAUG,IAAI,kBAAkBZ,MAyBhD,MArBmB,aAAfH,EAAMmB,KAENjB,EAAc,OAGM,aAAfF,EAAMmB,KAEXjB,EAAc,OAGM,eAAfF,EAAMmB,KAEXjB,EAAc,SAGM,cAAfF,EAAMmB,MAEXjB,EAAc,QAKd,qBAAKkB,UAAS,yCAAoCpB,EAAMmB,KAA1C,eAAqDnB,EAAMmB,MAAzE,SACI,sBAAKC,UAAU,kBAAf,UACI,mBAAGA,UAAU,wBAAwBhB,KAAK,IAA1C,SAA+CJ,EAAMqB,QACrD,wBAAQD,UAAU,oDAAoDE,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA/N,SACI,+BACI,mBAAGF,UAAU,oCAGrB,sBAAKA,UAAU,2BAA2BG,GAAG,yBAA7C,UACI,oBAAIH,UAAU,kCAAd,SACI,oBAAIA,UAAU,WAAd,SACI,mBAAGA,UAAU,2BAA2B,eAAa,OAAOhB,KAAK,IAAjE,sBAOR,sBAAKgB,UAAU,cAAf,UAEI,sBAAKG,GAAG,WAAWC,QAAS,WAAQxB,EAAMyB,WAAW,aAAeL,UAAU,WAA9E,UACI,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,wBAEnB,sBAAKG,GAAG,WAAWC,QAAS,WAAQxB,EAAMyB,WAAW,aAAeL,UAAU,WAA9E,UACI,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,wBAEnB,sBAAKG,GAAG,aAAaC,QAAS,WAAQxB,EAAMyB,WAAW,eAAiBL,UAAU,aAAlF,UACI,qBAAKA,UAAU,uBACf,qBAAKA,UAAU,0BAEnB,sBAAKG,GAAG,YAAYC,QAAS,WAAQxB,EAAMyB,WAAW,cAAgBL,UAAU,YAAhF,UACI,qBAAKA,UAAU,sBACf,qBAAKA,UAAU,oCCzG5B,SAASM,EAAS1B,GAG7B,IAoEA,EAAwB2B,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAGI5B,EAAmB,CAAC,MAAO,MAAO,QAAS,QAG/C,SAAS6B,EAAoBC,GAGzB,IAAIC,EAAW3B,SAASY,uBAAuB,YAE/CV,MAAMC,KAAKwB,GAAUvB,SAAQ,SAAAC,GAAY,IAAD,gBAElBT,GAFkB,IAEpC,2BAAoC,CAAC,IAA1BU,EAAyB,QAC5BD,EAAQE,UAAUC,SAAS,WAAaF,KACxCD,EAAQE,UAAUE,OAAO,WAAaH,GACtCD,EAAQE,UAAUE,OAAO,qBALG,8BASpCJ,EAAQE,UAAUG,IAAI,WAAWgB,MAMrC,IAAIE,EAAM5B,SAASY,uBAAuB,OAE1CV,MAAMC,KAAKyB,GAAKxB,SAAQ,SAAAC,GAAY,IAAD,gBAEbT,GAFa,IAE/B,2BAAoC,CAAC,IAA1BU,EAAyB,QAC5BD,EAAQE,UAAUC,SAAS,aAAeF,IAC1CD,EAAQE,UAAUE,OAAO,aAAeH,IAJjB,8BAQ/BD,EAAQE,UAAUG,IAAI,aAAagB,MAMvC,IAAIG,EAAc7B,SAASY,uBAAuB,0BAElDV,MAAMC,KAAK0B,GAAazB,SAAQ,SAAAC,GAAY,IAAD,gBAErBT,GAFqB,IAEvC,2BAAoC,CAAC,IAA1BU,EAAyB,QAC5BD,EAAQE,UAAUC,SAAS,yBAA2BF,KACtDD,EAAQE,UAAUE,OAAO,yBAA2BH,GACpDD,EAAQE,UAAUE,OAAO,sBALM,8BASvCJ,EAAQE,UAAUG,IAAI,yBAAyBgB,MA2BvD,OA5EA1B,SAASgB,MAAQ,uBAsDE,aAAfrB,EAAMmB,KAENW,EAAoB,OAGA,aAAf9B,EAAMmB,KAEXW,EAAoB,OAGA,eAAf9B,EAAMmB,KAEXW,EAAoB,SAGA,cAAf9B,EAAMmB,MAEXW,EAAoB,QAMpB,sBAAKV,UAAU,gBAAf,UACI,6BAAKpB,EAAMmC,UACX,qBAAKf,UAAU,YAAf,SAEI,0BAAUA,UAAU,oDAAoDG,GAAG,WAAWa,KAAK,IAAIC,MAAOT,EAAMU,SAzJ9F,SAACC,GAEvBV,EAAQU,EAAMC,OAAOH,QAuJ4HI,YAAY,sBAGzJ,sBAAKrB,UAAU,qDAAf,UACI,wBAAQA,UAAU,4CAA4CI,QAxJ/C,WAEvB,IAAIkB,EAAUd,EAAKe,cAEnBd,EAAQa,IAoJA,gCACA,wBAAQtB,UAAU,4CAA4CI,QAxI/C,WAEvB,IAAIkB,EAAUd,EAAKgB,cAEnBf,EAAQa,IAoIA,gCACA,wBAAQtB,UAAU,4CAA4CI,QAlJtC,WAGhC,IAAIkB,EAAUd,EAAKiB,QAAQ,UAAU,SAACC,GAAD,OAAQA,EAAED,QAAQ,OAAO,SAACE,GAAD,OAAOA,EAAEJ,oBAGvEd,EAAQa,IA4IA,6BACA,wBAAQtB,UAAU,4CAA4CI,QAnIrD,WAEjB,IAAIkB,EAAUd,EAAKiB,QAAQ,OAAQ,IAEnChB,EAAQa,IA+HA,2BACA,wBAAQtB,UAAU,4CAA4CI,QA7HhD,WAEtB,IAAIkB,EAAUd,EAAKiB,QAAQ,OAAQ,KAAKG,OAGxCnB,EAAQa,IAwHA,iCACA,wBAAQtB,UAAU,4CAA4CI,QA3GzD,WAEb,IAAIQ,EAAW3B,SAAS4C,eAAe,YAGvCjB,EAASkB,SACTlB,EAASmB,kBAAkB,EAAG,OAG9BC,UAAUC,UAAUC,UAAUtB,EAASK,QAkG/B,kBACA,wBAAQjB,UAAU,oDAAoDI,QAtHhE,WAIdK,EAFc,KAoHN,sBAEJ,sBAAKT,UAAU,iBAAf,UACI,yCAEA,8BAAIQ,EAAK2B,OAAS,EAAI3B,EAAO,2BACzB,uBACA,uBACA,uBAAMR,UAAU,cAAhB,oBACW,qBAAIA,UAAU,0CAAd,cAA0DQ,EAAK2B,OAAS,EAAI3B,EAAK4B,MAAM,KAAKD,OAAS,EAArG,OADX,cACmI,qBAAInC,UAAU,0CAAd,cAA0DQ,EAAK2B,UADlM,kBAC6N,qBAAInC,UAAU,0CAAd,UAAyD,KAAQQ,EAAK4B,MAAM,KAAKD,OAAjF,qBDpDjPxD,EAAO0D,aAAe,CAClBpC,MAAO,YACPqC,MAAO,mBEpFIC,MAtCf,WAEE,MAAwBhC,mBAAS,MAAjC,mBAAOR,EAAP,KAAayC,EAAb,KA0BA,OACE,gCACE,cAAC7D,EAAD,CAAQsB,MAAM,YAAYF,KAAMA,EAAMM,WA1BvB,SAACoC,GACD,aAAbA,GACFD,EAAQC,GACRxD,SAASyD,KAAKC,MAAMC,gBAAkB,UACtC3D,SAASyD,KAAKC,MAAME,MAAQ,SAER,aAAbJ,GACPD,EAAQC,GACRxD,SAASyD,KAAKC,MAAMC,gBAAkB,UACtC3D,SAASyD,KAAKC,MAAME,MAAQ,SAER,eAAbJ,GACPD,EAAQC,GACRxD,SAASyD,KAAKC,MAAMC,gBAAkB,UACtC3D,SAASyD,KAAKC,MAAME,MAAQ,SAER,cAAbJ,IACPD,EAAQC,GACRxD,SAASyD,KAAKC,MAAMC,gBAAkB,QACtC3D,SAASyD,KAAKC,MAAME,MAAQ,UAOkCP,MAAM,oBACpE,qBAAKtC,UAAU,iBAAf,SACE,cAAC,EAAD,CAAUD,KAAMA,EAAMgB,QAAQ,qCC3BvB+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxE,SAAS4C,eAAe,SAM1BiB,M","file":"static/js/main.2b4306f8.chunk.js","sourcesContent":["import React from 'react'\r\n// Eis KO Use Kr K Main Props Pr Eik Check Laga Sakta Hou K Sirf Perticular Data type He Allow Hain For Example if its String Toh Phir String K Elawa or Koi DataType Nahi Allow.\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n\r\n    let themeStylingNums = ['One', 'Two', 'Three', 'Four']\r\n\r\n    function navbarStyling(navbarStyleNum){\r\n        //#S1 ==> All Links Styling \r\n        //Nav Links Styling Using classes\r\n        let href = document.querySelectorAll('a');\r\n        \r\n        Array.from(href).forEach(element => {\r\n            for (const num of themeStylingNums) {\r\n                if (element.classList.contains('modeLink'+num)) {\r\n                    element.classList.remove('modeLink'+num);\r\n                    element.classList.remove('modeLink');\r\n                }\r\n            }\r\n            element.classList.add('modeLink'+navbarStyleNum);\r\n        })\r\n        \r\n        //#S2 ==> Hamburger Icon Styling \r\n        // Hamburger Icon Styling\r\n        \r\n        // Inner\r\n        let faBars = document.getElementsByClassName('fa-bars');\r\n\r\n        Array.from(faBars).forEach(element => {\r\n            for (const num of themeStylingNums) {\r\n                if (element.classList.contains('fa-bars-'+num)) {\r\n                    element.classList.remove('fa-bars-'+num);\r\n                    element.classList.remove('fa-bars-default');\r\n                }\r\n            }\r\n            element.classList.add('fa-bars-'+navbarStyleNum);\r\n        });\r\n\r\n        // Outer\r\n        let navbarToggler = document.getElementsByClassName('navbar-toggler');\r\n\r\n        Array.from(navbarToggler).forEach(element => {\r\n            for (const num of themeStylingNums) {\r\n                if (element.classList.contains('navbar-toggler-'+num)) {\r\n                    element.classList.remove('navbar-toggler-'+num);\r\n                    element.classList.remove('navbar-toggler-default');\r\n                }\r\n            }\r\n            element.classList.add('navbar-toggler-'+navbarStyleNum);\r\n        })\r\n    }\r\n\r\n    if (props.mode === 'themeOne') {\r\n\r\n        navbarStyling('One');\r\n        \r\n    }\r\n    else if (props.mode === 'themeTwo') {\r\n\r\n        navbarStyling('Two');\r\n\r\n    }\r\n    else if (props.mode === 'themeThree') {\r\n\r\n        navbarStyling('Three');\r\n\r\n    }\r\n    else if (props.mode === 'themeFour') {\r\n\r\n        navbarStyling('Four');\r\n\r\n    }\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"modeLink navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler navbar-toggler-default shadow-none\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span>\r\n                        <i className=\"fas fa-bars fa-bars-default\"></i>\r\n                    </span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link modeLink active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link modeLink\" href=\"/about\">{props.about}</a>\r\n                        </li> */}\r\n                    </ul>\r\n\r\n                    <div className=\"themePalate\">\r\n\r\n                        <div id=\"themeOne\" onClick={() => { props.toggleMode('themeOne') }} className=\"themeOne\">\r\n                            <div className=\"themeOneColorOne\"></div>\r\n                            <div className=\"themeOneColorTwo\"></div>\r\n                        </div>\r\n                        <div id=\"themeTwo\" onClick={() => { props.toggleMode('themeTwo') }} className=\"themeTwo\">\r\n                            <div className=\"themeTwoColorOne\"></div>\r\n                            <div className=\"themeTwoColorTwo\"></div>\r\n                        </div>\r\n                        <div id=\"themeThree\" onClick={() => { props.toggleMode('themeThree') }} className=\"themeThree\">\r\n                            <div className=\"themeThreeColorOne\"></div>\r\n                            <div className=\"themeThreeColorTwo\"></div>\r\n                        </div>\r\n                        <div id=\"themeFour\" onClick={() => { props.toggleMode('themeFour') }} className=\"themeFour\">\r\n                            <div className=\"themeFourColorOne\"></div>\r\n                            <div className=\"themeFourColorTwo\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n// Apply Checks On Proptype For More Check Detail On Import Proptype\r\n// Allow Only string Data or agr isko string na mila toh error through hoga because of isRequired\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired\r\n}\r\n\r\n// I also set default values\r\nNavbar.defaultProps = {\r\n    title: 'Logo Here',\r\n    about: 'About Text Here'\r\n}","// 'useState' is a 'Hook' is used to create state\r\nimport React, { useState } from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n\r\n    // Define Functions\r\n    const handleUpdateValue = (event) => {\r\n        // With The Help Of 'event' We Can change The state 'text' to new text by using 'setText'.\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const convertToUpperCase = () => {\r\n        // Convert To Upper Case\r\n        let newText = text.toUpperCase();\r\n        // Update The State\r\n        setText(newText);\r\n    }\r\n\r\n\r\n    const convertFirstWordToUpperCase = () => {\r\n\r\n        // Convert Capitalize the first letter of each word in a string \r\n        let newText = text.replace(/\\w\\S*/g, (w) => (w.replace(/^\\w/, (c) => c.toUpperCase())));\r\n\r\n        // Update The State\r\n        setText(newText);\r\n    }\r\n\r\n    const convertToLowerCase = () => {\r\n        // Convert To Lower Case\r\n        let newText = text.toLowerCase();\r\n        // Update The State\r\n        setText(newText);\r\n    }\r\n\r\n    const removeSpaces = () => {\r\n        //We can also use the String.replace() method that uses a regular expression to search whitespaces and replace them with empty string('').\r\n        let newText = text.replace(/\\s+/g, '');\r\n        // Update The State\r\n        setText(newText);\r\n\r\n    }\r\n    const removeExtraSpaces = () => {\r\n        //Remove Extra Spaces Using REGEX.\r\n        let newText = text.replace(/\\s+/g, ' ').trim();\r\n\r\n        // Update The State\r\n        setText(newText);\r\n\r\n    }\r\n\r\n    const clearText = () => {\r\n        //Set text Area to Empty By Using newText Empty Variable\r\n        let newText = '';\r\n        // Update The State\r\n        setText(newText);\r\n\r\n\r\n    }\r\n\r\n    // Copy Clipboared Function\r\n    const copyText = () => {\r\n        /* Get the text field */\r\n        let textArea = document.getElementById(\"textArea\");\r\n\r\n        /* Select the text field */\r\n        textArea.select();\r\n        textArea.setSelectionRange(0, 99999); /* For mobile devices */\r\n\r\n        /* Copy the text inside the text field */\r\n        navigator.clipboard.writeText(textArea.value);\r\n    }\r\n\r\n    // Declare a new state variable, which we'll call \"count\"\r\n    const [text, setText] = useState('');\r\n   \r\n\r\n    let themeStylingNums = ['One', 'Two', 'Three', 'Four']\r\n    document.title = 'TextUtils - TextForm';\r\n\r\n    function textFormPageStyling(themeStyleNumber) {\r\n        // #SEC1\r\n        // Main Text Form Container Styling Using Classes\r\n        let textArea = document.getElementsByClassName('textArea');\r\n\r\n        Array.from(textArea).forEach(element => {\r\n\r\n            for (const num of themeStylingNums) {\r\n                if (element.classList.contains('textArea' + num)) {\r\n                    element.classList.remove('textArea' + num);\r\n                    element.classList.remove('textAreaDefault');\r\n                }\r\n            }\r\n\r\n            element.classList.add('textArea'+themeStyleNumber);\r\n\r\n        });\r\n\r\n        // #SEC2\r\n        // Buttons Styling Using classes\r\n        let btn = document.getElementsByClassName('btn');\r\n\r\n        Array.from(btn).forEach(element => {\r\n\r\n            for (const num of themeStylingNums) {\r\n                if (element.classList.contains('modeButton' + num)) {\r\n                    element.classList.remove('modeButton' + num);\r\n                }\r\n            }\r\n\r\n            element.classList.add('modeButton'+themeStyleNumber);\r\n\r\n        })\r\n\r\n        // #SEC3\r\n        // Text Preview \"Summary\" styling Using Classes\r\n        let previewText = document.getElementsByClassName('stylePreviewCharacters');\r\n\r\n        Array.from(previewText).forEach(element => {\r\n\r\n            for (const num of themeStylingNums) {\r\n                if (element.classList.contains('stylePreviewCharacters' + num)) {\r\n                    element.classList.remove('stylePreviewCharacters' + num);\r\n                    element.classList.remove('defaultStylePrev');\r\n                }\r\n            }\r\n            \r\n            element.classList.add('stylePreviewCharacters'+themeStyleNumber);\r\n\r\n        })\r\n    }\r\n\r\n    if (props.mode === 'themeOne') {\r\n\r\n        textFormPageStyling('One');\r\n\r\n    }\r\n    else if (props.mode === 'themeTwo') {\r\n\r\n        textFormPageStyling('Two');\r\n\r\n    }\r\n    else if (props.mode === 'themeThree') {\r\n\r\n        textFormPageStyling('Three');\r\n\r\n    }\r\n    else if (props.mode === 'themeFour') {\r\n\r\n        textFormPageStyling('Four');\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"lightModeText\">\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3 my-3\">\r\n                {/* onChange Function Is Used To Edit Text Area Without This We Cannot Edit In text Area For More Check  \"handleUpdateValue\" Function & the Value='' by default the state value we use in 'useState'*/}\r\n                <textarea className=\"form-control shadow-none textArea textAreaDefault\" id=\"textArea\" rows=\"8\" value={text} onChange={handleUpdateValue} placeholder='Enter Text Here'>\r\n                </textarea>\r\n            </div>\r\n            <div className=\"buttonGroup d-flex flex-wrap justify-content-start\">\r\n                <button className=\"btn btn-info shadow-none m-2 rounded-pill\" onClick={convertToUpperCase}>Convert Upper Case</button>\r\n                <button className=\"btn btn-info shadow-none m-2 rounded-pill\" onClick={convertToLowerCase}>Convert Lower Case</button>\r\n                <button className=\"btn btn-info shadow-none m-2 rounded-pill\" onClick={convertFirstWordToUpperCase}>Capitalize Text</button>\r\n                <button className=\"btn btn-info shadow-none m-2 rounded-pill\" onClick={removeSpaces}>Remove Spaces</button>\r\n                <button className=\"btn btn-info shadow-none m-2 rounded-pill\" onClick={removeExtraSpaces}>Remove Extra Spaces</button>\r\n                <button className=\"btn btn-info shadow-none m-2 rounded-pill\" onClick={copyText}>Copy</button>\r\n                <button className=\"btn btn-outline-info shadow-none m-2 rounded-pill\" onClick={clearText}>Clear</button>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h2>Preview</h2>\r\n                {/* Using Ternary Operator And Set Condition */}\r\n                <p>{text.length > 0 ? text : 'Enter text for preview !'}\r\n                    <br />\r\n                    <br />\r\n                    <span className=\"textStyling\">\r\n                        Words: <em className=\"stylePreviewCharacters defaultStylePrev\"> {text.length > 0 ? text.split(' ').length : 0} </em>Character: <em className=\"stylePreviewCharacters defaultStylePrev\"> {text.length}</em> Time to read: <em className=\"stylePreviewCharacters defaultStylePrev\">{0.008 * text.split(' ').length}min</em>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport React, { useState } from 'react'\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\n\n\nfunction App() {\n  // Change The Mode To Different Themes\n  const [mode, setMode] = useState(null);\n\n  const toggleMode = (modeName) => {\n    if (modeName === 'themeOne') {\n      setMode(modeName);\n      document.body.style.backgroundColor = '#121212';\n      document.body.style.color = 'white';\n    }\n    else if (modeName === 'themeTwo') {\n      setMode(modeName);\n      document.body.style.backgroundColor = '#0B163E';\n      document.body.style.color = 'white';\n    }\n    else if (modeName === 'themeThree') {\n      setMode(modeName);\n      document.body.style.backgroundColor = '#1B1F22';\n      document.body.style.color = 'white';\n    }\n    else if (modeName === 'themeFour') {\n      setMode(modeName);\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n    }\n  }\n\n\n  return (\n    <div>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} about=\"About TextUtils\" />\n      <div className=\"container my-3\">\n        <TextForm mode={mode} heading=\"Enter Your Text To Analyze\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}